package cmj.thread;

public class DaemonThread {

     void main() {
        /* ðŸ”¹ Non-Daemon Thread (aka User Thread)
            â€¢	Definition: A normal thread that keeps the JVM alive.
            â€¢	Behavior: The JVM will not exit until all non-daemon threads finish.
            â€¢	Use Cases:
            â€¢	Business logic
            â€¢	Main application flow
            â€¢	Any task that must complete (e.g., request processing, DB writes)
        */
         Thread t2 = new Thread(() -> System.out.println("Non Daemon thread"));
         t2.start();


         /* ðŸ”¹ Daemon Thread (Background Thread)
            â€¢	Definition: A thread that runs in the background and does not prevent JVM shutdown.
            â€¢	Behavior: JVM can kill it abruptly when all user threads finish.
            â€¢	Use Cases:
            â€¢	Logging
            â€¢	Monitoring
            â€¢	Cleanup tasks
            â€¢	GC (Javaâ€™s own garbage collector runs on daemon threads)
          */
         Thread t = new Thread(() -> {
             while (true) System.out.println("Daemon still running...");
         });
         t.setDaemon(true);  // must be set *before* calling start()
         t.start();

    }
}
